{"componentChunkName":"component---node-modules-gatsby-theme-medium-src-templates-post-js","path":"/2020/05/tig-on-pi/","result":{"data":{"post":{"id":"cf2dd11d-9b9a-5543-86d4-f34ab92e9769","title":"Installing the TIG stack on Raspberry Pi","date":"May 03, 2020","excerpt":"A guide to installing InfluxDB, Telegraf, and Grafana on a Raspberry Pi 4 running Raspbian Buster. Unlike every other guide like this on the internet, this one works.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Installing the TIG stack on Raspberry Pi\",\n  \"path\": \"/2020/05/tig-on-pi\",\n  \"tags\": [\"Raspberry Pi\", \"Tutorials\", \"Data Visualization\", \"Monitoring\", \"Telegraf\", \"InfluxDB\", \"Grafana\"],\n  \"date\": \"2020-05-03\",\n  \"updated\": \"2020-05-03\",\n  \"excerpt\": \"A guide to installing InfluxDB, Telegraf, and Grafana on a Raspberry Pi 4 running Raspbian Buster. Unlike every other guide like this on the internet, this one works.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"setting-up-influxdb-telegraf-and-grafana-on-raspberry-pi\"\n  }, \"Setting Up InfluxDB, Telegraf, and Grafana on Raspberry Pi\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/img/blog/grafana_dash.webp\",\n    \"alt\": null\n  }))), mdx(\"h3\", {\n    \"id\": \"tldr\"\n  }, \"tl;dr\"), mdx(\"p\", null, \"Do the following in a shell you\\u2019ve already auth\\u2019d into sudo on:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo apt update\\nsudo apt upgrade\\n\\nwget -qO- https://repos.influxdata.com/influxdb.key | sudo apt-key add -\\n# change \\\"buster\\\" as appropriate for your distro\\necho \\\"deb https://repos.influxdata.com/debian buster stable\\\" | sudo tee /etc/apt/sources.list.d/influxdb.list\\nsudo apt update\\nsudo apt install influxdb\\nsudo systemctl unmask influxdb\\nsudo systemctl enable influxdb\\nsudo systemctl start influxdb\\n\\n# you can find the current telegraf release here: https://portal.influxdata.com/downloads/\\nwget https://dl.influxdata.com/telegraf/releases/telegraf-1.14.2_linux_armhf.tar.gz\\ntar xf telegraf-1.14.2_linux_armhf.tar.gz\\nsudo systemctl enable --now telegraf\\nrm telegraf-1.14.2_linux_armhf.tar.gz\\n\\nsudo apt-get install -y adduser libfontconfig1\\n# you can find the current grafana release here: https://grafana.com/grafana/download\\nwget https://dl.grafana.com/oss/release/grafana_6.7.3_armhf.deb\\nsudo dpkg -i grafana_6.7.3_armhf.deb\\nsudo systemctl enable --now grafana-server\\nrm grafana_6.7.3_armhf.deb\\n\")), mdx(\"p\", null, \"This should cause all three services to start on system boot. You\\u2019ll need to\\nconfigure Telegraf to actually write to your local Influx instance at\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://127.0.0.1:8086\"\n  }), \"http://127.0.0.1:8086\"), \" (there\\u2019s a sample config under the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Telegraf\"), \" part of the\\npost), then set up Grafana to read from Influx (at the same port) via the UI\\nat localhost:3000.\"), mdx(\"hr\", null), mdx(\"br\", null), mdx(\"h3\", {\n    \"id\": \"setting-up-the-tig-stack-on-raspberry-pi\"\n  }, \"Setting up the TIG stack on Raspberry Pi\"), mdx(\"p\", null, \"I\\u2019m getting a little cabin-fevery as the 2020 quarantine moves into its third\\nmonth. To try and defray some of the extra energy, I\\u2019ve been hacking on a Pi I\\nset up with a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://openvpn.net/\"\n  }), \"Pi-hole\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://openvpn.net/\"\n  }), \"openvpn\"), \"\\nserver about a month ago. \"), mdx(\"p\", null, \"One of the cool things about the Pi-hole is that it gives you a little\\nat-a-glance view of how your machine is doing, including CPU load, memory\\nutilization, and temperature. This window into system stats made me realize\\nthat my little box is packing \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"heat\"), \":\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/img/blog/pihole_data.webp\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"I\\u2019m running a Pi 4, which \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.theregister.co.uk/2019/07/22/raspberry_pi_4_too_hot_to_handle/\"\n  }), \"is known for generating more heat than it can handle\"), \",\\nso temperatures of ~60 C (\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.raspberrypi.org/forums/viewtopic.php?t=39953\"\n  }), \"the upper range of \\u201Csafe\\u201D\"), \")\\nisn\\u2019t too shocking \\u2014 but with summer coming and me planning to add some load\\nto this machine in the near future, I wanted to set up monitoring to make sure\\nmy box wasn\\u2019t going to melt on me. This also has the side benefit that I\\u2019ll\\nhave a metrics system already in place for anything else I stand up on this\\nmachine.\"), mdx(\"p\", null, \"Enter the TIG stack. TIG \\u2014 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"T\"), \"elegraf, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I\"), \"nfluxDB, and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"G\"), \"rafana \\u2014 is\\na suite of open-source solutions for collecting, storing, and visualizing\\ntime-series data, like the sort you\\u2019ll get from repeatedly measuring system\\ntemperature. \"), mdx(\"p\", null, \"This tutorial will walk you through setting up each of these services\\nseparately. These steps were tested on a Raspberry Pi 4 running Raspbian Buster,\\nso other configurations might require some tweaking. \"), mdx(\"p\", null, \"All of the code here should be run in a terminal on your Raspberry Pi unless\\nI specify it needs to go somewhere else. To make sure you\\u2019re not\\ngoing to run into dependency hell, it\\u2019s a good idea to run\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo apt update && sudo apt upgrade\"), \" before installing any of the stack.\"), mdx(\"hr\", null), mdx(\"br\", null), mdx(\"h3\", {\n    \"id\": \"influxdb\"\n  }, \"InfluxDB\"), mdx(\"p\", null, \"First up, we need to set up our InfluxDB instance. This database is where\\nour Telegraf instance will send metrics and where Grafana will read from, so\\nit makes sense to stand it up first!\"), mdx(\"p\", null, \"Installing the service is easy enough \\u2014 we just need to add Influx\\u2019s\\nauthentication key, add their repository to our trusted sources, and\\nthen install it via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"apt\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"wget -qO- https://repos.influxdata.com/influxdb.key | sudo apt-key add -\\n# change \\\"buster\\\" as appropriate for your distro\\necho \\\"deb https://repos.influxdata.com/debian buster stable\\\" | sudo tee /etc/apt/sources.list.d/influxdb.list\\nsudo apt update\\nsudo apt install influxdb influxdb-client\\n\")), mdx(\"p\", null), mdx(\"p\", null, \"Now we want to actually start the database, and tell our system to start it\\nafter reboots \\u2014 since we\\u2019re expecting to always be collecting metrics via\\nTelegraf, we need to make sure that we always have a place to write to, as well.\\nThis is a quick two-liner using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"systemctl\"), \" \\u2014 we first need to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unmask\"), \" Influx,\\nwhich will let us add it as a service, then tell our Pi to start the service\\nboth right now and every time the system restarts via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enable --now\"), \"\\ncommand:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo systemctl unmask influxdb\\nsudo systemctl enable --now influxdb\\n\")), mdx(\"p\", null, \"After this, you should be able to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"systemctl status influxdb\"), \" to see the\\nservice status \\u2014 if everything went according to plan, you should see\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Active: active (running)\"), \" around line 3 of the output.\"), mdx(\"p\", null, \"At this point, it\\u2019s probably healthy to add authentication to your Influx\\ninstance if your pi is exposed to external networks. You can set up a basic\\nadmin account via:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"influx\\nCREATE USER admin WITH PASSWORD '<password>' WITH ALL PRIVILEGES\\n\")), mdx(\"p\", null, \"You can then force HTTP authentication by adding the following under the HTTP\\nheader in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/influxdb/influxdb.conf\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"[HTTP]\\nauth-enabled = true\\npprof-enabled = true\\npprof-auth-enabled = true\\nping-auth-enabled = true\\n\")), mdx(\"p\", null, \"The changes take effect the next time your service starts, which you can\\ntrigger via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo systemctl restart influxdb\"), \".\"), mdx(\"hr\", null), mdx(\"br\", null), mdx(\"h3\", {\n    \"id\": \"telegraf\"\n  }, \"Telegraf\"), mdx(\"p\", null, \"With Influx up and running, it\\u2019s time for us to start writing records, which\\nmeans standing up Telegraf!\"), mdx(\"p\", null, \"Telegraf is updated pretty frequently, so it\\u2019s a good idea to check \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://portal.influxdata.com/downloads/\"\n  }), \"the release page\"), \"\\nto see what version you should be installing. At the time of writing, the\\ncurrent version is 1.14.2, so I ran the following to install Telegraf on my\\nmachine:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"wget https://dl.influxdata.com/telegraf/releases/telegraf_1.14.2-1_armhf.deb\\nsudo dpkg -i telegraf_1.14.2-1_armhf.deb\\nrm telegraf_1.14.2-1_armhf.deb\\n\")), mdx(\"p\", null, \"We now have Telegraf installed on our machine, but the service won\\u2019t do us much\\ngood before we set up our configuration, located at\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/telegraf/telegraf.conf\"), \". Telegraf operates by coordinating a bunch of\\n\\u201Cplugins\\u201D, which work to collect and write data to and from different sources.\\nYou can see the full list of plugins \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/influxdata/telegraf/tree/master/plugins\"\n  }), \"at Telegraf\\u2019s GitHub repo\"), \",\\nand activate each by copying the configuration from the plugin\\u2019s readme into\\nyour \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/telegraf/telegraf.conf\"), \" file.\"), mdx(\"p\", null, \"I spent far too much time pouring over the various plugins and wound up with\\nthe following configuration file \\u2014 you can use this to overwrite your default\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"telegraph.conf\"), \" file and start collecting metrics right away, or you can\\nspend the time now to set up your instance to suit your own particular needs.\\nJust make sure you edit your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[[outputs.influxdb]]\"), \" to include the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"[[outputs.influxdb]]\\n   ## The full HTTP or UDP URL for your InfluxDB instance.\\n   urls = [\\\"http://127.0.0.1:8086\\\"] # required\\n\")), mdx(\"p\", null, \"My full configuration looks like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"[agent]\\n   # Batch size of values that Telegraf sends to output plugins.\\n   metric_batch_size = 1000\\n   # Default data collection interval for inputs.\\n   interval = \\\"30s\\\"\\n   # Added degree of randomness in the collection interval.\\n   collection_jitter = \\\"5s\\\"\\n   # Send output every 5 seconds\\n   flush_interval = \\\"5s\\\"\\n   # Buffer size for failed writes.\\n   metric_buffer_limit = 10000\\n   # Run in quiet mode, i.e don't display anything on the console.\\n   quiet = true\\n[[inputs.ping]] # # Ping given url(s) and return statistics\\n## urls to ping\\nurls = [\\\"www.github.com\\\",\\\"www.amazon.com\\\",\\\"1.1.1.1\\\",\\\"www.mm218.dev\\\"]\\n## number of pings to send per collection (ping -c )\\ncount = 3\\n## interval, in s, at which to ping. 0 == default (ping -i )\\nping_interval = 15.0\\n## per-ping timeout, in s. 0 == no timeout (ping -W )\\ntimeout = 10.0\\n## interface to send ping from (ping -I )\\ninterface = \\\"wlan0\\\"\\n[[inputs.system]]\\n[[inputs.influxdb]]\\n  ## Works with InfluxDB debug endpoints out of the box,\\n  ## but other services can use this format too.\\n  ## See the influxdb plugin's README for more details.\\n\\n  ## Multiple URLs from which to read InfluxDB-formatted JSON\\n  ## Default is \\\"http://localhost:8086/debug/vars\\\".\\n  urls = [\\n    \\\"http://localhost:8086/debug/vars\\\"\\n  ]\\n  ## http request & header timeout\\n  timeout = \\\"5s\\\"\\n[[inputs.disk]]\\n  ## Ignore mount points by filesystem type.\\n  ignore_fs = [\\\"tmpfs\\\", \\\"devtmpfs\\\", \\\"devfs\\\", \\\"iso9660\\\", \\\"overlay\\\", \\\"aufs\\\", \\\"squashfs\\\"]\\n[[inputs.diskio]]\\n[[inputs.internal]]\\n  ## If true, collect telegraf memory stats.\\n  collect_memstats = true\\n[[inputs.mem]]\\n[[inputs.processes]]\\n# custom temperature script\\n# https://github.com/mikemahoney218/pi-admin/blob/master/telegraf-scripts/systemp.sh\\n[[inputs.exec]]\\n  commands = [\\\"sh /tmp/telegraf-scripts/systemp.sh\\\"]\\n  timeout = \\\"5s\\\"\\n  data_format = \\\"influx\\\"\\n[[outputs.influxdb]]\\n   ## The full HTTP or UDP URL for your InfluxDB instance.\\n   urls = [\\\"http://127.0.0.1:8086\\\"] # required\\n   ## The target database for metrics (telegraf will create it if not exists).\\n   database = \\\"pi_logs\\\" # required\\n   ## Name of existing retention policy to write to.  Empty string writes to\\n   ## the default retention policy.\\n   retention_policy = \\\"\\\"\\n   ## Write consistency (clusters only), can be: \\\"any\\\", \\\"one\\\", \\\"quorum\\\", \\\"all\\\"\\n   write_consistency = \\\"any\\\"\\n   ## Write timeout (for the InfluxDB client), formatted as a string.\\n   ## If not provided, will default to 5s. 0s means no timeout (not recommended).\\n   timeout = \\\"10s\\\"\\n\")), mdx(\"p\", null, \"In putting all this together, I found out that the Telegraf plugin to measure\\nsystem temperature \\u2014 the thing that got me down this rabbit hole in the first\\nplace \\u2014 doesn\\u2019t actually work on Raspberry Pi systems. As a workaround, I\\nthrew together \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/mikemahoney218/pi-admin/blob/master/telegraf-scripts/systemp.sh\"\n  }), \"a simple one-liner in Bash\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"echo \\\"systemp temp=`cat /sys/class/thermal/thermal_zone0/temp`\\\"\\n\")), mdx(\"p\", null, \"I saved that script off to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/tmp/telegraf-scripts/systemp.sh\"), \", then added it to\\nmy \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"telegraf.conf\"), \" in the brick:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"[[inputs.exec]]\\n  commands = [\\\"sh /tmp/telegraf-scripts/systemp.sh\\\"]\\n  timeout = \\\"5s\\\"\\n  data_format = \\\"influx\\\"\\n\")), mdx(\"p\", null, \"If you\\u2019re not worried about measuring temperature, you don\\u2019t need (or want) to\\ninclude that section in your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"telegraf.conf\"), \".\"), mdx(\"p\", null, \"If you set up HTTP authentication for your Influx instance, you\\u2019re going to\\nwant to add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"username\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"password\"), \" fields under the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[[outputs.influxdb]]\"), \" \"), mdx(\"p\", null, \"With our configuration in place, all that\\u2019s left now is to start and enable the\\nTelegraf service:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo systemctl enable --now telegraf\\n\")), mdx(\"p\", null, \"As before, you should be able to see that the service is running without issue\\nby running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"systemctl status telegraf\"), \".\"), mdx(\"p\", null, \"Now that your service is running, any changes that you make to your\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"telegraf.config\"), \" file will only take effect after the service restarts. You\\ncan always restart the service using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo systemctl restart telegraf\"), \", but I\\npersonally kept forgetting to do so (and then was surprised when my metrics\\nweren\\u2019t showing up in Influx). To deal with that,\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/mikemahoney218/pi-admin/tree/master/telegraf-watcher\"\n  }), \"I wrote an extremely-micro service that restarts Telegraf for me\"), \".\"), mdx(\"hr\", null), mdx(\"br\", null), mdx(\"h3\", {\n    \"id\": \"grafana\"\n  }, \"Grafana\"), mdx(\"p\", null, \"We\\u2019re finally onto our last service, the G in the TIG stack, Grafana. A quick\\nword of warning: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"don\\u2019t try to\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo apt install grafana\"), \". The main\\nrepository has an outdated version of Grafana, which will leave you stuck at a\\nblank screen when you try to log on for the first time.\"), mdx(\"p\", null, \"Instead, we\\u2019ll install Grafana via dpkg, like we did with Telegraf. Check for\\nthe most current version at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://grafana.com/grafana/download\"\n  }), \"Grafana\\u2019s downloads page\"), \".\\nAt the time of writing, I was installing version 6.7.3, so my commands to\\ninstall looked like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"wget https://dl.grafana.com/oss/release/grafana_6.7.3_armhf.deb\\nsudo dpkg -i grafana_6.7.3_armhf.deb\\nsudo systemctl enable --now grafana-server\\nrm grafana_6.7.3_armhf.deb\\n\")), mdx(\"p\", null, \"Unlike Influx and Telegraf, Grafana can be managed almost entirely from a UI.\\nBoot up \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:3000\"), \" on your Pi and log in using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"admin\"), \" for both your\\nusername and password \\u2014 you\\u2019ll be prompted to change it once you\\u2019re logged in\\nfor the first time.\"), mdx(\"p\", null, \"You\\u2019ll then want to add your local Influx instance as a datasource for Grafana.\\nAssuming you\\u2019ve followed along until now, the URL for your Influx instance is\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:8086\"), \". You\\u2019ll also want to add whatever database Telegraf is\\nwriting to \\u2014 in the sample configuration I posted, the database name is\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pi_logs\"), \", but you can find yours by looking for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"database\"), \" field under\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[[outputs.influxdb]]\"), \". If you added authentication to your Influx instance,\\nyou\\u2019ll also want to turn on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"basic auth\"), \" and provide your database credentials.\"), mdx(\"hr\", null), mdx(\"br\", null), mdx(\"h3\", {\n    \"id\": \"get-graphing\"\n  }, \"Get Graphing\"), mdx(\"p\", null, \"And with that, you should have everything you need to start monitoring your\\nPi \\u2014 and, with a little elbow grease, anything your Pi can touch! While\\nit certainly feels a little like overkill, I\\u2019ve now got state-of-the art\\ntracking and system metrics for my Pi, letting me confirm beyond a shadow of\\na doubt that\\u2026 my Pi is running too hot. With all the time I spent on this,\\nmaybe I should have just bought a fan.\"), mdx(\"p\", null, \"But hey \\u2014 would a fan look \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"this\"), \" good?\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/img/blog/full_grafana.webp\",\n    \"alt\": null\n  }))));\n}\n;\nMDXContent.isMDXComponent = true;"},"site":{"siteMetadata":{"title":"Mike Mahoney"}}},"pageContext":{"id":"cf2dd11d-9b9a-5543-86d4-f34ab92e9769","excerpt":"A guide to installing InfluxDB, Telegraf, and Grafana on a Raspberry Pi 4 running Raspbian Buster. Unlike every other guide like this on the internet, this one works.","slug":"/2020/05/tig-on-pi/","title":"Installing the TIG stack on Raspberry Pi","date":"May 03, 2020","siteTitle":"Mike Mahoney","socialLinks":[{"name":"Github","url":"https://github.com/mikemahoney218"},{"name":"Linkedin","url":"https://linkedin.com/in/mikemahoney218/"},{"name":"Twitter","url":"https://twitter.com/mikemahoney218"}],"previous":{"node":{"id":"69972f87-2d5e-557d-ac94-6a3ee73487d9","excerpt":"I had been getting frustrated with not being able to quickly find coronavirus\ndata for my area, and not being able to see recent trends…","slug":"/2020/04/corona-viz/","title":"A minimalist visualization of Coronavirus rates","date":"April 27, 2020"}},"next":{"node":{"id":"61b9c20c-7c51-5672-aa52-2a515627e895","excerpt":"Why do beavers pick certain trees to eat?","slug":"/2020/06/beaver-foreco/","title":"Beavers, Trees, and Reasons Why: New Article in Forest Ecology and Management","date":"June 13, 2020"}}}}}